{
	// Place your snippets for python here. Each snippet is defined under a snippet name and has a prefix, body and
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	"class(object)": {
		"prefix": "class",
		"body": [
			"class ${1:ClassName}(object):",
			"    def __init__(self, ${2:param}):",
			"        self.${2:param} = ${2:param}",
			"",
			"    def __repr__(self):",
			"        return f\"${1:ClassName}(${2:param}='{self.${2:param}}')\"",
			"",
			"    def __str__(self):",
			"        return f\"${1:ClassName}={self.__dict__}\"",
			"",
			"    def ${3:method_name}(self, ${4:parameter_list}):",
			"        raise NotImplementedError",
			""
		],
		"description": "Code snippet for a class definition"
	},
	"class(unittest)": {
		"prefix": "class",
		"body": [
			"import unittest",
			"",
			"",
			"class ${1:TestClassName}(unittest.TestCase):",
			"    @classmethod",
			"    def setUpClass(cls):",
			"        pass",
			"",
			"    @classmethod",
			"    def tearDownClass(cls):",
			"        pass",
			"",
			"    def setUp(self):",
			"        pass",
			"",
			"    def tearDown(self):",
			"        pass",
			"",
			"    def ${2:test_method_name}(self):",
			"        ${3:pass}",
			""
		],
		"description": "Code snippet for a unittest class definition"
	},
	"unittest.main()": {
		"prefix": "__main__",
		"body": [
			"if __name__ == '__main__':",
			"    unittest.main()"
		],
		"description": "Code snippet for running unittest"
	}
}
